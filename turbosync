#!/bin/bash
# shellcheck source=/dev/null

if pidof -o %PPID -x "$(basename "$0")"; then
	echo Already running!
	exit 1
fi

UPLOADCACHE="/mnt/$(basename ${UPLOADCACHE})"
MEDIA="$(basename ${MEDIA})"
LOGS=/logs
APILOG=${LOGS}/api.log

# Load existing variables and use them as defaults, if available

chown -R omniuser:omniuser "${UPLOADCACHE}"

AGE=0 # How many minutes old a file must be before copying/deleting

TEMPFILE="/tmp/filesmissing"

echo Starting sync at "$(date)"

# Fix dates in the future

find "${UPLOADCACHE}"/ ! -path "*Downloads*" -type f -mmin -0 -exec touch "{}" -d "$(date -d "-5 minutes")" \;

# Identify files needing to be copied

find "${UPLOADCACHE}"/ ! -path "*Downloads*" -type f -mmin +${AGE} | sed 's|'"${UPLOADCACHE}/"'||' | sort >${TEMPFILE}

# Copy files
if [[ -s ${TEMPFILE} ]]; then
	COUNTER=$(rclone rc core/stats | jq .transferring | jq length)
	while IFS= read -r FILE; do
		# Check to see if file is already queued from a previous run; if so, skip
		rclone rc core/stats | jq '.transferring' | grep "${UPLOADCACHE}/${FILE}" >/dev/null
		RUNCHECK=${?}
		if [[ ${RUNCHECK} -gt 0 ]]; then
			while [[ ${COUNTER} -ge ${TURBOMAX} ]]
			do
				# Keep the queue manageable for rclone
				sleep 10
				COUNTER=$(rclone rc core/stats | jq .transferring | jq length)
			done
			BYTES=$(du -b "${UPLOADCACHE}/${FILE}" | cut -f1)
			BYTESH=$(du -h "${UPLOADCACHE}/${FILE}" | cut -f1)
			echo "$(date '+%F %H:%M:%S')",START,1,"${BYTES}" "# /${FILE}" >>"${APILOG}"
			echo Queuing "/${FILE}" of size "${BYTESH}"
			## Fix for Rclone RC creating multiple directories
			#TESTDIR="${RCLONEMOUNT}$(dirname "/${FILE}")"
			#echo $TESTDIR
			#if [[ ! -d "${TESTDIR}" ]]; then
				#echo Making "${TESTDIR}"
				#mkdir -p "${TESTDIR}"
			#fi
			if [[ ! ${USENFS} = true ]]
			then
				# Not using NFS so use rclone move
				rclone rc operations/movefile _async=true srcFs=/ srcRemote="${UPLOADCACHE}/${FILE}" dstFs="${RCLONESERVICE}": dstRemote="${FILE}"
			else
				# Using NFS so use local copy (via rclone rc)
				rclone rc operations/movefile _async=true srcFs=/ srcRemote="${UPLOADCACHE}/${FILE}" dstFs=/ dstRemote="/mnt/${NFSLOCAL}/${FILE}"
			fi
			COUNTER=$(( ${COUNTER} +1 ))
		else
			echo Skipping "${FILE}": Already in queue
		fi
	done <${TEMPFILE}
else
	echo Nothing to queue
fi

# Cleanup letovers

rm ${TEMPFILE}
cd "${UPLOADCACHE}/${MEDIA}" || exit
find . -type d -empty -delete
mkdir -p "${UPLOADCACHE}/${MEDIA}" "${UPLOADCACHE}/Downloads"
echo Finished at "$(date)"
echo ---------------------------------------------------
